
name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:

      upload:
        description: 'Upload to PyPI (true/false)'
        required: false
        default: 'false'
permissions:
  contents: read

jobs:
  # Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest



    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        shell: bash -l {0}  # 确保使用 bash shell
        run: |
          python -m pip install --upgrade pip
          pip install build numpy wheel   pybind11 setuptools setuptools-scm -U
      - name: Debug Git state and version
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Release Tag: ${{ github.event.release.tag_name }}"
          echo "Checked out commit: $(git rev-parse HEAD)"
          echo "Current tag: $(git describe --tags --exact-match 2>/dev/null || echo 'no exact tag')"
          echo "All tags: $(git tag --points-at HEAD)"
          echo "Git describe: $(git describe --tags --dirty)"
          echo "Setuptools-SCM version: $(python -m setuptools_scm)"
      - name: Ensure clean repository
        run: git clean -fdx
      - name: Build source distribution
        run: python -m build --sdist -n


      - name: Test source distribution
        run: pip install dist/*.tar.gz
        env:
          SKLEARN_SKIP_NETWORK_TESTS: 1

        shell: bash
      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz



  build_wheels:
    needs: [  build_sdist]

    name: Build wheel ${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
          - [ubuntu-22.04, manylinux_x86_64, ""]
#          - [ubuntu-22.04, musllinux_x86_64, ""]
          # - [ubuntu-22.04-arm, manylinux_aarch64, ""]
          - [ubuntu-22.04-arm, musllinux_aarch64, ""]
          # - [macos-13, macosx_x86_64, ""]

          # targeting macos >= 14. Could probably build on macos-14, but it would be a cross-compile
#          - [macos-13, macosx_x86_64, ""]
          # - [macos-14, macosx_arm64, ""]  # always use accelerate
#           - [windows-2022, win_amd64, ""]
          # - [windows-2022, win32, ""]
        python: ["cp310","cp311", "cp312" ]

    env:
      PYTHONUTF8: 1
      PYTHONIOENCODING: utf-8
      CIBW_BUILD_VERBOSITY: 1
      IS_32_BIT: ${{ matrix.buildplat[1] == 'win32' }}
      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
      IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Setup MSVC (32-bit)
      if: ${{ matrix.buildplat[1] == 'win32' }}
      uses: bus1/cabuild/action/msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d  # v1
      with:
        architecture: 'x86'
    - name: Setup macOS
      if: matrix.buildplat[0] == 'macos-13' || matrix.buildplat[0] == 'macos-14'
      run: |
        CIBW="RUNNER_OS=macOS"
        echo "CIBW_ENVIRONMENT_MACOS=$CIBW " >> "$GITHUB_ENV"
        brew install libomp
        echo "OMP_INCLUDE_PATH=$(brew --prefix libomp)/include" >> $GITHUB_ENV
        echo "OMP_LIB_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV


    - name: Install CUDA
      if: matrix.buildplat[0] == 'windows-2022'
      run: |
        choco install cuda --version=12.9.1.576 --no-progress --yes

    - name: Setup MSVC (x64)
      if: ${{ matrix.buildplat[1] == 'win_amd64' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Build wheels
      uses: pypa/cibuildwheel@d04cacbc9866d432033b1d09142936e6a0e2121a  # v2.23.2
      env:
        CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux_2_28_x86_64
        CIBW_MANYLINUX_AARCH64_IMAGE: quay.io/pypa/manylinux_2_28_aarch64
        CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
        # Install CUDA toolchain inside manylinux container (x86_64 only) and expose env
        CIBW_BEFORE_BUILD_LINUX: |
          set -euxo pipefail
          dnf install -y libgomp dnf-plugins-core 
          ARCH="$(uname -m)"
          if [ "$ARCH" = "x86_64" ]; then
            dnf config-manager --add-repo "https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo"
            dnf clean all
            dnf -y install cuda-toolkit-11-8
            ln -s /usr/local/cuda-11.8 /usr/local/cuda || true
            echo "CUDA installed at /usr/local/cuda"
          else
            dnf config-manager --add-repo "https://developer.download.nvidia.com/compute/cuda/repos/rhel8/sbsa/cuda-rhel8.repo"
            dnf clean all
            dnf -y install cuda-toolkit-11-8
            ln -s /usr/local/cuda-11.8 /usr/local/cuda || true
            echo "CUDA installed at /usr/local/cuda"
             
          fi
        CIBW_ENVIRONMENT_LINUX: |
          CUDA_HOME=/usr/local/cuda
          PATH=/usr/local/cuda/bin:$PATH
          LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
        # Try to repair with auditwheel; if CUDA libs cannot be bundled, keep original wheel
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
          auditwheel repair -w {dest_dir} {wheel} || cp {wheel} {dest_dir}/

        CIBW_ENVIRONMENT_WINDOWS: >
          CUDA_PATH="C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9" CUDA_HOME="C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9" DISTUTILS_USE_SDK=1 MSSdk=1 CC=cl.exe CXX=cl.exe

        CIBW_ENVIRONMENT_MACOS: >
            ${{ matrix.buildplat[1] == 'macosx_arm64' && 'MACOSX_DEPLOYMENT_TARGET=14.0' || 'MACOSX_DEPLOYMENT_TARGET=13.0' }}

        CIBW_BEFORE_BUILD_WINDOWS: |
          pip install delvewheel
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            python -m delvewheel repair --add-path "%CUDA_PATH%\bin" -w {dest_dir} {wheel}

    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: cibw-wheels-${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}
        path: ./wheelhouse/*.whl


#   Upload the wheels and the source distribution
  upload_pypi:
    name: Upload to pypi
    if: github.event_name == 'release' || github.event.inputs.upload == 'true'
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      # IMPORTANT: this permission is mandatory for Trusted Publishing
      id-token: write
    needs: [build_wheels, build_sdist]
    # The artifacts cannot be uploaded on PRs


    steps:
      - name: Checkout NepTrainKit
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist-all
          path: dist/*

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
#          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist
          skip-existing: true
