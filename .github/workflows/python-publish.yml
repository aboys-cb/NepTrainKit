# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheel ${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
#          - [ubuntu-22.04, manylinux_x86_64, ""]
#          - [ubuntu-22.04, musllinux_x86_64, ""]
#          - [ubuntu-22.04-arm, manylinux_aarch64, ""]
#          - [ubuntu-22.04-arm, musllinux_aarch64, ""]
#          - [macos-13, macosx_x86_64, ""]

          # targeting macos >= 14. Could probably build on macos-14, but it would be a cross-compile
#          - [macos-13, macosx_x86_64, ""]
          - [macos-14, macosx_arm64, ""]  # always use accelerate
#          - [windows-2019, win_amd64, ""]
#          - [windows-2019, win32, ""]
        python: ["cp310","cp311", "cp312" ]

    env:
      CIBW_BUILD_VERBOSITY: 1
      IS_32_BIT: ${{ matrix.buildplat[1] == 'win32' }}
      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
      IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Setup MSVC (32-bit)
      if: ${{ matrix.buildplat[1] == 'win32' }}
      uses: bus1/cabuild/action/msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d  # v1
      with:
        architecture: 'x86'
    - name: Setup macOS
      if: matrix.buildplat[0] == 'macos-13' || matrix.buildplat[0] == 'macos-14'
      run: |
        CIBW="RUNNER_OS=macOS"
        echo "CIBW_ENVIRONMENT_MACOS=$CIBW " >> "$GITHUB_ENV"

#    - name: Install OpenMP (macOS only)
#      if:  matrix.os == 'macos-latest'
#      run: |
#          brew install libomp
#          echo "OMP_INCLUDE_PATH=$(brew --prefix libomp)/include" >> $GITHUB_ENV
#          echo "OMP_LIB_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV
#    - name: Install dependencies
#      shell: bash -l {0}  # 确保使用 bash shell
#      run: |
#        python -m pip install --upgrade pip
#        pip install build   pybind11 setuptools setuptools-scm -U

    - name: Build wheels
      uses: pypa/cibuildwheel@d04cacbc9866d432033b1d09142936e6a0e2121a  # v2.23.2
      env:
        CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
        CIBW_BEFORE_BUILD_LINUX: "yum install -y libgomp"
        CIBW_BEFORE_BUILD_MACOS: >
            brew install libomp 
            echo "OMP_INCLUDE_PATH=$(brew --prefix libomp)/include" >> $GITHUB_ENV
            echo "OMP_LIB_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV
        CIBW_ENVIRONMENT_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=11.0

        CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            python -m delvewheel repair -w {dest_dir} {wheel}

    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}
        path: ./wheelhouse/*.whl


#    - name: Publish package
#      uses: pypa/gh-action-pypi-publish@release/v1
#      with:
#        user: __token__
#        password: ${{ secrets.PYPI_API_TOKEN }}
#        packages_dir: dist
#        skip_existing: false
#    - name: Publish to PyPI
#      run: |
#        pip install twine
#        twine upload --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} dist/*
#      shell: bash